#include <errno.h>
#include <stdio.h>
#include <stdlib.h>
#include <wiringPiI2C.h>
#include <wiringPi.h>
#include <errno.h>
#include <math.h>
#include <stdint.h>
#include "LinkedListStruct.h"
#include <signal.h>
#include <pigpio.h>
#include <unistd.h>
#include <pthread.h>
#include "LSM6DS3_Collection.h"
#include "i2c-dev.h"
#include "IMU.h"
#include <fcntl.h>
#define dt104	0.009615384615
#define dt52	0.01923077
#define dt416	0.00240384615
#define dt833	0.00120048019
#define dt1660	0.00060240963
#define dt3330	0.000300030
#define dt	dt1660

// LSM6DS3 CONFIGURATION
// --------------------------------------------------------------------------
#define LSM6DS3_DEVID 0x6b
#define LSM6DS3_DPS 500
#define LSM6DS3_XLG 2


// LSM6DS3 REGISTER ADDRESSES
// -------------------------------------------------------------------------
#define LSM6DS3_G_CTRL2		0x11
#define LSM6DS3_G_OUTX		0x22
#define LSM6DS3_G_OUTY		0x24
#define LSM6DS3_G_OUTZ		0x26
#define LSM6DS3_XL_OUTX		0x28
#define LSM6DS3_XL_OUTY		0x2A
#define LSM6DS3_XL_OUTZ		0x2C

// 
#define LSM6DS3_G_FS_245	0b00000000
#define LSM6DS3_G_FS_500	0b00000100
#define LSM6DS3_G_FS_2000	0b00001100

#define LSM6DS3_G_ODR_416	0b01100000
#define LSM6DS3_G_ODR_104	0b01000000
#define LSM6DS3_G_ODR_52	0b00110000

uint32_t *BLOCK_READY;
char EXIT_FLAG=0;    
int DRDY_FLAG=0;
int TAP_FLAG=0;
int IN_ISR=0;
char startpoint=0;
uint8_t FIFO_INT_STATUS;
float currAxis[3];

/*struct pCollection_args {
	uint8_t BLOCK_READY;
	float x;
	float y;
	float z;
};

struct pCollection_args *args;
*/
void DRDY_ISR(void){
	//printf("enter isr\n");
	gArgs->BLOCK_READY=1;
}


int convertTwosCompToInt(int bin, int bits){
 	if (bin&(1<<(bits-1))){
	    bin = bin | ~((1<<bits)-1);
	}
	return bin;
}
int combineCharsToInt(char a, char b){
	int c;
	c = (a<<8)+b;
	return c;
}

void LSM6DS3_EmptyFIFO(int pfd){
	uint16_t fifo_num;
	//uint8_t *fillBuff;
	fifo_num = (i2cReadWordData(pfd,0x3A)&(0x0FFF));
	printf("Emptying FIFO of %d bytes ",fifo_num);
	while ((i2cReadByteData(pfd,0x3B)&(0x10)) == 0) {
		printf(".");
		i2cReadWordData(pfd,0x3e);//,fillBuff,32u);
	}
	//fillBuff=NULL;
	printf("Done\n");
}    
void LSM6DS3_Setup(int pfd){
    // check device id
    if (i2cReadByteData(pfd,0x0F) != 0x69){
	    printf("IMU not detected\n");
	    gArgs->CAL_COMPLETE=1;
	    pthread_exit(NULL);
    }
    i2cWriteByteData(pfd,0x12,0x44);
    i2cWriteByteData(pfd,0x0d,0x00);
    i2cWriteByteData(pfd,0x0e,0x20);//0x08); 
    //i2cWriteByteData(pfd,0             x06,0xDC); //set FTH
    i2cWriteByteData(pfd,0x06,0x10);//5DC);
    i2cWriteByteData(pfd,0x13,0x01);
    i2cWriteByteData(pfd,0x0a,0x41);
    // LPF SETUP
    //
    LSM6DS3_EmptyFIFO(pfd);
    i2cWriteByteData(pfd,0x0a,0x40);
    i2cWriteByteData(pfd,0x17,0b00000000); 
    i2cWriteByteData(pfd,0x11,0b10000100); //1.66kHz FS=245dps
    i2cWriteByteData(pfd,0x10,0b01100000);
    i2cWriteByteData(pfd,0x08,0b00001100); //gyro no decimation, xl decimation 4
    i2cWriteByteData(pfd,0x07,0x00);
    i2cWriteByteData(pfd,0x0a,0b01000001);// ODR=1.66kHz, FIFO MODE
    i2cWriteByteData(pfd,0x0b,0x00);
    /*wiringPiI2CWriteReg8(fd,0x12,0x44);
    wiringPiI2CWriteReg8(fd,0x0d,0x00);
    wiringPiI2CWriteReg8(fd,0x0e,0x08); 
    wiringPiI2CWriteReg8(fd,0x0a,0x26); 
    LSM6DS3_EmptyFIFO(pfd);
    wiringPiI2CWriteReg8(fd,0x0a,0x30);   wiringPiI2CWriteReg8(fd,0x11,0b01100100);
    wiringPiI2CWriteReg8(fd,0x11,0b01100100);
    wiringPiI2CWriteReg8(fd,0x10,0b01000000);
    wiringPiI2CWriteReg8(fd,0x08,0b00001100); //gyro no decimation, xl decimation 4
    wiringPiI2CWriteReg8(fd,0x07,0x00);
    wiringPiI2CWriteReg8(fd,0x06,0x90); //set FTH
    wiringPiI2CWriteReg8(fd,0x0a,0b00110110);// ODR=416, CONTINUOUS MODE*/
    printf("Running IMU Calibration\n------------------------\n");
}

void stop(int signum) {
    printf("Freeing buffers...\n");
    EXIT_FLAG=1; 
}

void *runCollection(void *bp){
    struct pCollection_args *pArgs = (struct pCollection_args*)bp;
    int num;
    int fd;
    int pfd;
    FILE *fp;
  

    fp=fopen("out.log","w");
    fprintf(fp, "New log file from LSM6DS3 Collection\n");
    LinkedList A;
    A = newLinkedList();
    float xl_valx,xl_valy,xl_valz;
    float gy_valx,gy_valy,gy_valz;
    float avg_xl_valx=0,avg_xl_valy=0,avg_xl_valz=1.0;
    float sum_xl_valx=0, sum_xl_valy=0, sum_xl_valz=0;   
    float angle_x=0,angle_y=0,angle_z=0;
    
    if(wiringPiISR(16,INT_EDGE_RISING,&DRDY_ISR) < 0) printf("Error\n");


    int i=0;
    char *rxBlock;
    char *txBlock;
    rxBlock = malloc(sizeof(char)*30);
    txBlock = malloc(sizeof(char)*30);
    pfd = i2cOpen(1,LSM6DS3_DEVID,0);
    if (pfd < 0){
	    perror("pigpio i2c failed");
	    exit(1);
    }
    if ((fd=wiringPiI2CSetup(LSM6DS3_DEVID))<0) printf("Failed");
    if (fd < 0){
	perror("Wiring Pi open fail");
	exit(1); 
    }   
    LSM6DS3_Setup(pfd);
    float prev_xl_valz = 1;    
    float offset_gy_x=0,offset_gy_y=0,offset_gy_z=0;
    float offset_xl_x=0;
    float offset_xl_y=0;
    float offset_xl_z=0;
    int curVal;
    int testVal=0;
    startpoint = -1;
    uint16_t FIFO_FLAG=0;
    emptyList(A);  
    char CAL_MODE=1;
    char EMPTY_FIFO=0; 
    int prev_angle_x;    
    int j;
    int ping=0;		
    uint16_t k=0;
    uint16_t fnum;
    uint16_t fifoStatus;
    char thisStart;
    uint8_t REALIGN_FLAG=0;	
    float vx = 0,vy=0, vz=0;
    char devblock[80];
    int result;
    struct timespec last;
    uint16_t cal_count=0;
    uint8_t xl_count=0;
    struct timespec tNow,tLast;
    uint64_t tDelta=0;
    /*char lsmfilename[20];
    sprintf(lsmfilename, "/dev/i2c-1");
    char bkfd;
    bkfd = open(lsmfilename,O_RDWR);
    if (bkfd<0){
	    printf("Unable to open i2c bus\n");
    }*/
    // -----------------------------
    // START MAIN LOOP
    // -----------------------------
    while( (1) ){//&& (EXIT_FLAG==0)) {
	if (pArgs->BLOCK_READY==1) {
		if (REALIGN_FLAG == 1){
			//LSM6DS3_EmptyFIFO(pfd);
			REALIGN_FLAG=0;
			emptyList(A);
			thisStart =0;
			i=0;
			FIFO_FLAG=0;
			//startpoint = thisStart;
			//fprintf(fp,"New startpoint: %d\n",thisStart);
		}
		//pArgs->BLOCK_READY=0;
		k=0;
		fifoStatus = (uint16_t)i2cReadWordData(pfd,0x3A);
		//fprintf(fp,"status: %x\n", ((fifoStatus)&(0x6000)));
		//num = (fifoStatus)&(0x0FFF);
		if ( ((fifoStatus)&(0x6000))==  0 )
			fnum = (fifoStatus)&(0x0FFF);
		else {
			clock_gettime(CLOCK_MONOTONIC_RAW, &tLast);
			/*ioctl(bkfd,I2C_SLAVE,0x6b);
			
        		result= i2c_smbus_read_i2c_block_data(bkfd, 0x3E , sizeof(devblock), devblock);			
			printf("blocks read: %d\n", result);
			addNode(A,rxBlock,thisStart);*/
			//FIFO_FLAG++;
		
			//printf("FIFO OVRFLOW\n");
			//fprintf(fp,"FIFO OVRFLOW\n");
                        //i2cReadI2CBlockData(pfd,0x3E, (rxBlock),30u);
			while((i2cReadByteData(pfd,0x3B)&(0x10))==0){
                //                printf("Reading\n");
				i2cReadI2CBlockData(pfd,0x3E, (rxBlock),30u);
				addNode(A,rxBlock, thisStart);
				FIFO_FLAG++;
			}
			fnum = 0;//(uint16_t)((i2cReadWordData(pfd,0x3A))&(0x0FFF));
		}
		//fprintf(fp,"start - fnum: %ld\n", fnum);
		pArgs->BLOCK_READY=0;
		/*if( fnum > 30){
			//delayMicroseconds(5);
			++k;
			*while( (i2cReadByteData(pfd,0x3c) != 0 ) ) {
				i2cReadWordData(pfd,0x3e);
			}*
			fprintf(fp,"reading %d bytes\n" ,i2cReadI2CBlockData(pfd, 0x3E, (rxBlock),30u));
			addNode(A, rxBlock, thisStart);
			fprintf(fp,"loop %d: read - fnum: %d\n",k, fnum);
			fnum = (uint16_t)((i2cReadWordData(pfd,0x3A))&(0x0FFF)) ;
			FIFO_FLAG++;
		} else {
			pArgs->BLOCK_READY=0;
		}*/
		//i2cWriteByteData(pfd,0x0A,0x40);
		i2cWriteByteData(pfd,0x0A,0x40);
		i2cWriteByteData(pfd,0x0A,0x41);
		clock_gettime(CLOCK_MONOTONIC_RAW, &tNow);
		uint64_t deltaT = (tNow.tv_nsec-tLast.tv_nsec)/1000.0;
		fprintf(fp, "deltaT: %ld\n", deltaT);
		//fprintf(fp,"Done - fnum: %d\n",fnum);
	}
	if ( (FIFO_FLAG>0) && (REALIGN_FLAG ==0 )){
		if (i==0) {
			//fprintf(fp, "new block\n");
			xl_valx=0;xl_valy=0;xl_valz=0;
			if (!CAL_MODE){
				gy_valx=0;gy_valy=0;gy_valz=0;
			}
			startpoint = (int)popNode(A, txBlock);
			//fprintf(fp,"Popping Node, SP: %d\n", startpoint);
		
		}
		
		curVal = (int16_t)combineCharsToInt(*(txBlock+sizeof(char)*((2*i)+1)),*((txBlock)+sizeof(char)*2*i));
		
		//fprintf(fp, "curval: %d\n", curVal);
		switch(startpoint) {
			case 0:
			case 6:
			case 9:
			case 12:
		//		fprintf(fp,"%d\n", curVal);
				gy_valx += curVal*LSM6DS3_DPS/(float)32768.0*dt - offset_gy_x;///(float)4);
				break;
			case 1:
			case 7:
			case 10:
			case 13:
				gy_valy += curVal*LSM6DS3_DPS/(float)32768.0 - offset_gy_y;///(float)4;
				break;
			case 2:
			case 8:
			case 11:
			case 14:
				gy_valz += curVal*LSM6DS3_DPS/(float)32768.0 - offset_gy_z;///(float)4;
				break;
			case 3:
				xl_valx = curVal*LSM6DS3_XLG/(float)32768.0 - offset_xl_x;
				break;
			case 4:
				xl_valy = curVal*LSM6DS3_XLG/(float)32768.0 - offset_xl_y;
				break;
			case 5:
				xl_valz = curVal*LSM6DS3_XLG/(float)32768.0 - offset_xl_z;
				break;
			default:
				printf("FIFO ERROR\n");
				break;
		}
		if (startpoint < 14)
			startpoint++;
		else 
			startpoint=0;
		if (i == 14) { // End of complete FIFO pattern
			i=0; // reset
			// no longer using average b/c data is summed every pattern loop
			/*avg_xl_valx = xl_valx;///(float)j;///(NUM_SAMPLES/15);
			avg_xl_valy = xl_valy;///(float)j;///(float)(NUM_SAMPLES/15);
			avg_xl_valz = xl_valz;///(float)j;///(NUM_SAMPLES/15);
			*/
			if (CAL_MODE) {
				if ((cal_count % 10)==0){
					printf(".");
					fflush(stdout);
				}
				sum_xl_valx += xl_valx;
				sum_xl_valy += xl_valy;
				sum_xl_valz += xl_valz;
				cal_count++;
				if (cal_count == 10){
					printf("\nCALIBRATION COMPLETE\n");
					printf("========================\n");
					CAL_MODE=0;
					pArgs->CAL_COMPLETE=1;
					offset_gy_x = gy_valx/(float)(4.0*cal_count);//16000.0;
					offset_gy_y = gy_valy/(float)(4.0*cal_count);//16000.0;
					offset_gy_z = gy_valz/(float)(4.0*cal_count);//16000.0;
					offset_xl_x = sum_xl_valx/(float)cal_count;//4000.0;
					offset_xl_y = sum_xl_valy/(float)cal_count;//4000.0;
					offset_xl_z = (float)1.0-(sum_xl_valz/(float)cal_count);//4000.0);
					fprintf(fp,"Gyro X Offset: %0.4f\n", offset_gy_x);
					fprintf(fp,"Gyro Y Offset: %0.4f\n", offset_gy_y);
					fprintf(fp,"Acc X Offset: %0.4f\n", offset_xl_x);
					fprintf(fp,"Acc Y Offset: %0.4f\n", offset_xl_y);
					fprintf(fp,"Acc Z Offset: %0.4f\n", offset_xl_z);
					sum_xl_valx=0;sum_xl_valy=0;sum_xl_valz=0;
					//clock_gettime(CLOCK_MONOTONIC_RAW,&tLast);
				}
			} else {
				// for debugging
				/*fprintf(fp,"x-gy: %0.4f\n", gy_valx);
				fprintf(fp,"y-gy: %0.4f\n", gy_valy);
				fprintf(fp,"z-gy: %0.4f\n", gy_valz);
				fprintf(fp,"x-acc: %0.4f\n", xl_valx);
				fprintf(fp,"y-acc: %0.4f\n", xl_valy);
				fprintf(fp,"z-acc: %0.4f\n", xl_valz);*/
				/*if( abs(prev_xl_valz - xl_valz) > 0.8 ) {
					REALIGN_FLAG=1;
					fprintf(fp,"Trying to re-align\n");
					
					printf("Trying to re-align\n");
				} else {*/
				/*clock_gettime(CLOCK_MONOTONIC_RAW,&tNow);
				tDelta = (tNow.tv_sec-tLast.tv_sec)*1000000+(tNow.tv_nsec-tLast.tv_nsec)/1000;
				tLast=tNow;
				printf("    %0.3f   ", (tDelta/1000000.));
				prev_xl_valz=xl_valz;	*/
				angle_x = angle_x+(gy_valx);//*((float)tDelta/4000000.0));
				//angle_x=(angle_x+gy_valx);//+(0.02)*(atan2f(xl_valy,xl_valz) * 180 / PI);
				//angle_x=0.98*(angle_x+gy_valx)+(0.02)*(atan2f(xl_valy,xl_valz) * 180 / PI);
				//angle_y=0.98*(angle_y-gy_valy)+(0.02)*(atan2f(xl_valx,(xl_valz)) * 180 / PI);	
				//angle_x=0.98*(angle_x+gy_valx)+(0.02)*(atan2f(avg_xl_valy,avg_xl_valz) * 180 / PI);
				angle_y=0.98*(angle_y-gy_valy)+(0.02)*(atan2f(avg_xl_valx,avg_xl_valz) * 180 / PI);	
				
				angle_z=(angle_z+gy_valz);//+(0.03)*(atan2f(xl_valx, xl_valy) * 180 / PI);
				/*angle_x=angle_x*10.0f;
				angle_x = (angle_x >= (floor(angle_x)+0.5f)) ? ceil(angle_x) : floor(angle_x);
				angle_x = (angle_x/10.0f);
				angle_y=angle_y*10.0f;
				angle_y= (angle_y > (floor(angle_y+0.5f)) ? ceil(angle_y) : floor(angle_y));
				angle_y = angle_y/10;*/
				pArgs->x = angle_x;
				pArgs->y = angle_y;
				pArgs->z = angle_z;
				xl_count++;
				sum_xl_valx+=xl_valx;
				sum_xl_valy+=xl_valy;
				sum_xl_valz+=xl_valz;
				if (xl_count == 10){
					//struct timespec now;//, last;
					//clock_gettime(CLOCK_MONOTONIC,&now);
					//timespec_get(&now, TIME_UTC);
					//uint32_t deltaT = (uint32_t)now.tv_nsec-last.tv_nsec;//(uint32_t)now-lastSampleTime;
					//printf("\ndeltaT: %lu\n", deltaT);
					//last = now;
					avg_xl_valx = sum_xl_valx/10.0;
					avg_xl_valy = sum_xl_valy/10.0;
					avg_xl_valz = sum_xl_valz/10.0;
					OrdinalAxis->X = avg_xl_valx;
					OrdinalAxis->Y = avg_xl_valy;
					OrdinalAxis->Z = avg_xl_valz;
					/*gDeltaArgs->x = gy_valx;
					gDeltaArgs->y = gy_valy;
					gDeltaArgs->z = gy_valz;*/
					/*gDeltaArgs->x = round(gy_valx*10.)/10.0;
					gDeltaArgs->y = round(gy_valy*10.)/10.0;
					gDeltaArgs->z = round(gy_valz*10.)/10.0;*/
					updateXLCoordinateAxis(*pArgs,OrdinalAxis);
					vx += OrdinalAxis->X*981.0*0.0721f; //(float)(deltaT*1.0e-09);//*0.00721*3.0;
					vy += OrdinalAxis->Y*981.0*0.0721f;//*3.0;
					vz += ((round(OrdinalAxis->Z*10.)/10.0)-1)*9.81*0.10815f;//00721f;

					pArgs->xl_x = vx;
					pArgs->xl_y = vy;
					pArgs->xl_z = vz;//xl_valz;
					sum_xl_valx=0;
					sum_xl_valy=0;
					sum_xl_valz=0;
					xl_count=0;
				}
				

				prev_angle_x = angle_x;
				/*fprintf(fp, "x-axis: %0.4f\n",pArgs->x);
				fprintf(fp, "y-axis: %0.4f\n",angle_y);
				fprintf(fp, "z-axis: %0.4f\n",angle_z);*/
				//}
			}
			FIFO_FLAG--;
		} else {
			i++;
		}
	}
    }
    free(rxBlock);
    free(txBlock);
    fclose(fp);
    freeLinkedList(&A); 
    pthread_exit(NULL);
}

